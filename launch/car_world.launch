<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find car_simulation)/worlds/car.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <arg name="set_sensor_lidar" default="true" />
  <arg name="set_sensor_rplidar" default="true" />
  <param name="robot_description" command="$(find xacro)/xacro
  '$(find car_simulation)/urdf/car.xacro' 
  sensor_rplidar:=$(arg set_sensor_rplidar)
  sensor_lidar:=$(arg set_sensor_lidar)" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model car -param robot_description -x 0 -y 1 -z 3"/>

  <!-- ros_control car launch file -->
  <!-- <include file="$(find car_simulation)/launch/car_control.launch" /> -->

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find car_simulation)/config/car_control.yaml" command="load"/>
  
</launch>